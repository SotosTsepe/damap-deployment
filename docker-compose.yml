version: '3.3'

services:
  damap-be:
    build: 
      context: ./docker/damap-be
      args:
        DAMAP_BE_VERSION: ${DAMAP_BE_VERSION:-master}
    container_name: "damap-backend"
    environment:
      DAMAP_BE_ENV: ${DAMAP_BE_ENV:-DEV}
      DAMAP_BE_HOSTNAME: ${DAMAP_BE_HOSTNAME:-localhost}
    restart: "unless-stopped"

  damap-fe:
    build: 
      context: ./docker/damap-fe
      args:
        DAMAP_FE_VERSION: ${DAMAP_FE_VERSION:-master}
    container_name: "damap-frontend"
    restart: "unless-stopped"

  damap-db:
    build: ./docker/postgres/
    container_name: "damap-db"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-damap,keycloak}
    ports:
      - "5432:5432"
    volumes:
     - db-data:/var/lib/postgresql/data
    restart: "unless-stopped"
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 15s
      retries: 5

  keycloak:
    image: jboss/keycloak
    container_name: "keycloak"
    environment:
      PROXY_ADDRESS_FORWARDING: "true"
      DB_VENDOR: POSTGRES
      DB_ADDR: damap-db
      # the DB_DATABASE has to match one of the values provided in the POSTGRES_MULTIPLE_DATABASES
      DB_DATABASE: ${KEYCLOAK_DB:-keycloak}
      DB_USER: ${KEYCLOAK_DB_USER:-keycloak}
      DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}
      DB_SCHEMA: public
      KEYCLOAK_USER: ${KEYCLOAK_USER:-admin}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD:-admin}
      # comma separated paths of realm files to import
      KEYCLOAK_IMPORT: /tmp/import/${KEYCLOAK_IMPORT:-damap-realm.json}
    ports:
      - "8087:8443"
    volumes:
      - ./docker/keycloak/import:/tmp/import
      - ${KEYCLOAK_SSL_CERTIFICATE_PATH:-./docker/ssl/test.crt}:/etc/x509/https/tls.crt
      - ${KEYCLOAK_SSL_KEY_PATH:-./docker/ssl/test.key}:/etc/x509/https/tls.key
    restart: "unless-stopped"

  api-mock:
    image: clue/json-server
    container_name: "mock-api"
    command: db.json --routes routes.json
    volumes:
      - ./docker/api-mock/data/db.json:/data/db.json
      - ./docker/api-mock/data/routes.json:/data/routes.json
    ports:
      - "8091:80"
    restart: "unless-stopped"

  nginx:
    build:
      # Use docker directory as context since ssl certificates are to be used from multiple services
      # With this way we can copy the certificates to the container while keeping them outside of a
      # specific service
      context: ./docker
      dockerfile: ./nginx/Dockerfile
    container_name: "nginx"
    environment:
      NGINX_HOSTNAME: ${NGINX_HOSTNAME:-localhost}
      HTTP_AUTH_USER: ${HTTP_AUTH_USER:-admin}
      HTTP_AUTH_PASSWORD: ${HTTP_AUTH_PASSWORD:-admin}
      # Fallback paths for test SSL certificate and key
      # When deploying to a live domain, use the let's encrypt volume path. See also .env-sample.
      SSL_CERTIFICATE_PATH: ${SSL_CERTIFICATE_PATH:-/etc/nginx/ssl/test.crt}
      SSL_KEY_PATH: ${SSL_KEY_PATH:-/etc/nginx/ssl/test.key}
      SSL_TEST_CERTIFICATE_PATH: ${SSL_TEST_CERTIFICATE_PATH}
      SSL_TEST_KEY_PATH: ${SSL_TEST_KEY_PATH}
    volumes:
      - monitoring-report:/srv/report
      # share nginx logs to host so that goaccess can access them
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/docker-entrypoint.sh:/docker-entrypoint.sh
      # share certbot files
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    restart: "unless-stopped"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: "certbot"
    restart: "unless-stopped"
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt
      - ./docker/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Monitoring service
  goaccess:
    build: ./docker/goaccess
    container_name: goaccess
    environment:
      - TZ=${TZ:-Europe/Vienna}
    volumes:
      - monitoring-data:/srv/data
      - monitoring-report:/srv/report
      - ./docker/nginx/logs:/srv/logs
    ports:
      - "7890:7890"
    restart: "unless-stopped"

  damap-be-next:
    build: 
      context: ./docker/damap-be
      args:
        DAMAP_BE_VERSION: next
    container_name: "damap-backend-next"
    environment:
      DAMAP_BE_ENV: ${DAMAP_BE_ENV:-DEV}
      # see default.conf.template of nginx: caveat is test-<hostname> for 'next'
      DAMAP_BE_HOSTNAME: test-${DAMAP_BE_HOSTNAME:-localhost}
    restart: "unless-stopped"

  damap-fe-next:
    build: 
      context: ./docker/damap-fe
      args:
        DAMAP_FE_VERSION: next
    container_name: "damap-frontend-next"
    restart: "unless-stopped"

volumes:
  db-data:
  monitoring-data:
  monitoring-report:
